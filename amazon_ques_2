Description
Given an array A of N elements, find the maximum possible sum of a

    Contiguous subarray
    Non-contiguous (not necessarily contiguous) subarray.

Note: Empty subarrays/subsequences should not be considered.

Input
The first line of the input has an integer T. T cases follow.
Each test case begins with an integer N. In the next line, N integers follow representing the elements of array A.

Constraints
1 <= T <= 10
1 <= N <= 105
-104 <= a_i <= 104
The subarray and subsequences you consider should have at least one element.

Output
Two, space separated, integers denoting the maximum contiguous and non-contiguous subarray. At least one integer should be selected and put into the subarrays (this may be required in cases where all elements are negative).

Sample Test Case

Input

2
4
1 2 3 4
6
2 -1 2 3 4 -5


Output

10 10
10 11


Explanation
In the first case:
The max sum for both contiguous and non-contiguous elements is the sum of ALL the elements (as they are all positive).

In the second case:
[2 -1 2 3 4] -- This forms the contiguous subarray with the maximum sum.
For the max sum of a not-necessarily- contiguous group of elements, simply add all the positive elements.
Sample testcases
Testcase #1
Input
Output

2
4
1 2 3 4
6
2 -1 2 3 4 -5


####################2nd Problem##############################3

Description
You are given a matrix with M rows and N columns of cells, each of which contains either 1 or 0. Two cells are said to be connected if they are adjacent to each other horizontally, vertically, or diagonally. The connected and filled (i.e. cells that contain a 1) cells form a region. There may be several regions in the matrix.
Find the number of cells in the largest region in the matrix.

Input
There will be three parts of the input:
The first line will contain M, the number of rows in the matrix.
The second line will contain N, the number of columns in the matrix.
This will be followed by the matrix grid: the list of numbers that make up the matrix.

Output
Print the length of the largest region in the given matrix.

Constraints
0 < M < 10
0 < N < 10

Sample Test Case

Input

4
4
1 1 0 0
0 1 1 0
0 0 1 0
1 0 0 0


Output

5


Explanation

X X 0 0
0 X X 0
0 0 X 0
1 0 0 0

The X characters indicate the largest connected component, as per the given definition. There are five cells in this component.
Sample testcases
Testcase #1
Input
Output

4
4
1 1 0 0
0 1 1 0
0 0 1 0
1 0 0 0

############################3rd problem###############################
Description
Musiq is an online music streaming portal where users can upload and share any songs. Users also have the facility to create playlists. Within few months of its launch, the portal has accumulated a huge collection of songs. 
But it contains a lot of duplicates. Now, the team wants to get rid of all the duplicates. Therefore, they are looking for an efficient way to filter all the duplicate songs.

    Design an efficient algorithm which you will use to find all duplicates. To support your answer, design an efficient data structure to perform the above task. 
    Describe the High-Level Design of the Music Identification engine using Flowchart or Wireframes. 
    Describe the Low-Level Design using Class Block Diagrams. How will you implement your algorithm to write a better identification engine?


Note:

    You can drag and drop images in the text area to upload it
    You can use free tools like https://www.draw.io/ for the wireframes, flow chart, etc
    If you are using https://www.draw.io/, make sure you export it as an image.


####################My solution#######################################
 
print("Enter the Number of test cases")
T=raw_input("Enter the number: ")
print("Enter the number of elements in an array")
N=raw_input("entert the number of elements will be ")

if 1>T>10 and  1>N>105:
 print("It is going out of bound")
 
else:
A=list()
for i in range(int(N)):
      a_i=raw_input("fhfjhj: ")
     
      if -104>a_i>104 :
        print("It exceeds the elements values")
      else:
         A.append(str(''.join(A)))
         
         
         
         
 
